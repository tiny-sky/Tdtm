// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: tdtm.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tdtm_Begin_FullMethodName    = "/proto.Tdtm/Begin"
	Tdtm_Register_FullMethodName = "/proto.Tdtm/Register"
	Tdtm_Start_FullMethodName    = "/proto.Tdtm/Start"
	Tdtm_Commit_FullMethodName   = "/proto.Tdtm/Commit"
	Tdtm_Rollback_FullMethodName = "/proto.Tdtm/Rollback"
	Tdtm_GetState_FullMethodName = "/proto.Tdtm/GetState"
)

// TdtmClient is the client API for Tdtm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TdtmClient interface {
	Begin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BeginResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// phase1
	Start(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// phase2 for commit
	Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// phase2 for rollback
	Rollback(ctx context.Context, in *RollBckReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetState(ctx context.Context, in *GetStateReq, opts ...grpc.CallOption) (*GetStateResp, error)
}

type tdtmClient struct {
	cc grpc.ClientConnInterface
}

func NewTdtmClient(cc grpc.ClientConnInterface) TdtmClient {
	return &tdtmClient{cc}
}

func (c *tdtmClient) Begin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BeginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BeginResp)
	err := c.cc.Invoke(ctx, Tdtm_Begin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tdtmClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Tdtm_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tdtmClient) Start(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Tdtm_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tdtmClient) Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Tdtm_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tdtmClient) Rollback(ctx context.Context, in *RollBckReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Tdtm_Rollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tdtmClient) GetState(ctx context.Context, in *GetStateReq, opts ...grpc.CallOption) (*GetStateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStateResp)
	err := c.cc.Invoke(ctx, Tdtm_GetState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TdtmServer is the server API for Tdtm service.
// All implementations must embed UnimplementedTdtmServer
// for forward compatibility.
type TdtmServer interface {
	Begin(context.Context, *emptypb.Empty) (*BeginResp, error)
	Register(context.Context, *RegisterReq) (*emptypb.Empty, error)
	// phase1
	Start(context.Context, *StartReq) (*emptypb.Empty, error)
	// phase2 for commit
	Commit(context.Context, *CommitReq) (*emptypb.Empty, error)
	// phase2 for rollback
	Rollback(context.Context, *RollBckReq) (*emptypb.Empty, error)
	GetState(context.Context, *GetStateReq) (*GetStateResp, error)
	mustEmbedUnimplementedTdtmServer()
}

// UnimplementedTdtmServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTdtmServer struct{}

func (UnimplementedTdtmServer) Begin(context.Context, *emptypb.Empty) (*BeginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Begin not implemented")
}
func (UnimplementedTdtmServer) Register(context.Context, *RegisterReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTdtmServer) Start(context.Context, *StartReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedTdtmServer) Commit(context.Context, *CommitReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedTdtmServer) Rollback(context.Context, *RollBckReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (UnimplementedTdtmServer) GetState(context.Context, *GetStateReq) (*GetStateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedTdtmServer) mustEmbedUnimplementedTdtmServer() {}
func (UnimplementedTdtmServer) testEmbeddedByValue()              {}

// UnsafeTdtmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TdtmServer will
// result in compilation errors.
type UnsafeTdtmServer interface {
	mustEmbedUnimplementedTdtmServer()
}

func RegisterTdtmServer(s grpc.ServiceRegistrar, srv TdtmServer) {
	// If the following call pancis, it indicates UnimplementedTdtmServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tdtm_ServiceDesc, srv)
}

func _Tdtm_Begin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TdtmServer).Begin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tdtm_Begin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TdtmServer).Begin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tdtm_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TdtmServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tdtm_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TdtmServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tdtm_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TdtmServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tdtm_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TdtmServer).Start(ctx, req.(*StartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tdtm_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TdtmServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tdtm_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TdtmServer).Commit(ctx, req.(*CommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tdtm_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollBckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TdtmServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tdtm_Rollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TdtmServer).Rollback(ctx, req.(*RollBckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tdtm_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TdtmServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tdtm_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TdtmServer).GetState(ctx, req.(*GetStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Tdtm_ServiceDesc is the grpc.ServiceDesc for Tdtm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tdtm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Tdtm",
	HandlerType: (*TdtmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Begin",
			Handler:    _Tdtm_Begin_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Tdtm_Register_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Tdtm_Start_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Tdtm_Commit_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _Tdtm_Rollback_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _Tdtm_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tdtm.proto",
}
