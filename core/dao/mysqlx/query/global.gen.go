// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/tiny-sky/Tdtm/core/dao/entity"
)

func newGlobal(db *gorm.DB, opts ...gen.DOOption) global {
	_global := global{}

	_global.globalDo.UseDB(db, opts...)
	_global.globalDo.UseModel(&entity.Global{})

	tableName := _global.globalDo.TableName()
	_global.ALL = field.NewAsterisk(tableName)
	_global.GID = field.NewString(tableName, "g_id")
	_global.State = field.NewString(tableName, "state")
	_global.EndTime = field.NewInt64(tableName, "end_time")
	_global.TryTimes = field.NewInt64(tableName, "try_times")
	_global.NextCronTime = field.NewInt64(tableName, "next_cron_time")
	_global.CreateTime = field.NewInt64(tableName, "create_time")
	_global.UpdateTime = field.NewInt64(tableName, "update_time")

	_global.fillFieldMap()

	return _global
}

type global struct {
	globalDo globalDo

	ALL          field.Asterisk
	GID          field.String
	State        field.String
	EndTime      field.Int64
	TryTimes     field.Int64
	NextCronTime field.Int64
	CreateTime   field.Int64
	UpdateTime   field.Int64

	fieldMap map[string]field.Expr
}

func (g global) Table(newTableName string) *global {
	g.globalDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g global) As(alias string) *global {
	g.globalDo.DO = *(g.globalDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *global) updateTableName(table string) *global {
	g.ALL = field.NewAsterisk(table)
	g.GID = field.NewString(table, "g_id")
	g.State = field.NewString(table, "state")
	g.EndTime = field.NewInt64(table, "end_time")
	g.TryTimes = field.NewInt64(table, "try_times")
	g.NextCronTime = field.NewInt64(table, "next_cron_time")
	g.CreateTime = field.NewInt64(table, "create_time")
	g.UpdateTime = field.NewInt64(table, "update_time")

	g.fillFieldMap()

	return g
}

func (g *global) WithContext(ctx context.Context) *globalDo { return g.globalDo.WithContext(ctx) }

func (g global) TableName() string { return g.globalDo.TableName() }

func (g global) Alias() string { return g.globalDo.Alias() }

func (g global) Columns(cols ...field.Expr) gen.Columns { return g.globalDo.Columns(cols...) }

func (g *global) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *global) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["g_id"] = g.GID
	g.fieldMap["state"] = g.State
	g.fieldMap["end_time"] = g.EndTime
	g.fieldMap["try_times"] = g.TryTimes
	g.fieldMap["next_cron_time"] = g.NextCronTime
	g.fieldMap["create_time"] = g.CreateTime
	g.fieldMap["update_time"] = g.UpdateTime
}

func (g global) clone(db *gorm.DB) global {
	g.globalDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g global) replaceDB(db *gorm.DB) global {
	g.globalDo.ReplaceDB(db)
	return g
}

type globalDo struct{ gen.DO }

func (g globalDo) Debug() *globalDo {
	return g.withDO(g.DO.Debug())
}

func (g globalDo) WithContext(ctx context.Context) *globalDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g globalDo) ReadDB() *globalDo {
	return g.Clauses(dbresolver.Read)
}

func (g globalDo) WriteDB() *globalDo {
	return g.Clauses(dbresolver.Write)
}

func (g globalDo) Session(config *gorm.Session) *globalDo {
	return g.withDO(g.DO.Session(config))
}

func (g globalDo) Clauses(conds ...clause.Expression) *globalDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g globalDo) Returning(value interface{}, columns ...string) *globalDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g globalDo) Not(conds ...gen.Condition) *globalDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g globalDo) Or(conds ...gen.Condition) *globalDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g globalDo) Select(conds ...field.Expr) *globalDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g globalDo) Where(conds ...gen.Condition) *globalDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g globalDo) Order(conds ...field.Expr) *globalDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g globalDo) Distinct(cols ...field.Expr) *globalDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g globalDo) Omit(cols ...field.Expr) *globalDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g globalDo) Join(table schema.Tabler, on ...field.Expr) *globalDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g globalDo) LeftJoin(table schema.Tabler, on ...field.Expr) *globalDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g globalDo) RightJoin(table schema.Tabler, on ...field.Expr) *globalDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g globalDo) Group(cols ...field.Expr) *globalDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g globalDo) Having(conds ...gen.Condition) *globalDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g globalDo) Limit(limit int) *globalDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g globalDo) Offset(offset int) *globalDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g globalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *globalDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g globalDo) Unscoped() *globalDo {
	return g.withDO(g.DO.Unscoped())
}

func (g globalDo) Create(values ...*entity.Global) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g globalDo) CreateInBatches(values []*entity.Global, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g globalDo) Save(values ...*entity.Global) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g globalDo) First() (*entity.Global, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Global), nil
	}
}

func (g globalDo) Take() (*entity.Global, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Global), nil
	}
}

func (g globalDo) Last() (*entity.Global, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Global), nil
	}
}

func (g globalDo) Find() ([]*entity.Global, error) {
	result, err := g.DO.Find()
	return result.([]*entity.Global), err
}

func (g globalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Global, err error) {
	buf := make([]*entity.Global, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g globalDo) FindInBatches(result *[]*entity.Global, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g globalDo) Attrs(attrs ...field.AssignExpr) *globalDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g globalDo) Assign(attrs ...field.AssignExpr) *globalDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g globalDo) Joins(fields ...field.RelationField) *globalDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g globalDo) Preload(fields ...field.RelationField) *globalDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g globalDo) FirstOrInit() (*entity.Global, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Global), nil
	}
}

func (g globalDo) FirstOrCreate() (*entity.Global, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Global), nil
	}
}

func (g globalDo) FindByPage(offset int, limit int) (result []*entity.Global, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g globalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g globalDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g globalDo) Delete(models ...*entity.Global) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *globalDo) withDO(do gen.Dao) *globalDo {
	g.DO = *do.(*gen.DO)
	return g
}
